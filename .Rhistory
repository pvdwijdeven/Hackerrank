source('H:/R/Hackerrank/PolReg.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
inputset
count=inputset[1,1]
count
mean(inputset[,2])
mean(inputset[2,])
inputVector=inputset[2,]
inputVector
inputVector=c(inputVector)
inputVector
mean(inputVector)
mean[1,2,3]
x=c[1:3]
x=c(1:3)
x
mean(x)
typeof(inputset)
inputVector=unlist(inputset[2,])
inputVector
typeof(inputVector)
inputVector=c(unlist(inputset[2,]))
typeof(inputVector)
inputVector
mean(inputVector)
result=c(mean(inputVector),median(inputVector),mode(inputVector))
cat(sprintf("%f", result),sep="\n")
result
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
result
result=c(mean(inputVector),median(inputVector),Mode(inputVector))
result
result=c(mean(inputVector),median(inputVector),Mode(inputVector),sd(inputVector))
cat(sprintf("%f", result),sep="\n")
?unique
unique(inputVector)
ux[which.max(tabulate(match(x, ux)))]
ux=unique(inputVector)
ux[which.max(tabulate(match(x, ux)))]
tabulate(match(x, ux))
ux[0]
which.max(0)
?which.max
inputVector
inputVector[1]=inputVector[4]
tabulate(match(x, ux))
ux[which.max(tabulate(match(x, ux)))]
ux=unique(inputVector)
ux
ux[which.max(tabulate(match(x, ux)))]
tabulate(match(x, ux))
x=[1,2,3,4,5,4,3]
x=c(1,2,3,4,5,4,3)
ux=unique(x)
ux
match(x,ux)
tabulate(match(x,ux))
x=c(1,2,3,4,5,4,6)
ux
tabulate(match(x,ux))
match(x,ux)
ux[which.max(tabulate(match(x, ux)))]
x[4]
x==ux
x==x
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
min(inputVector)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
t.test(inputVector)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
x==ux
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
length(x)
length(ux)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
t.test(inputVector)
?t.test
t.test(inputVector,conf.level = 97.5)
t.test(inputVector,conf.level = 0.975)
t.test(inputVector,conf.level = 0.90)
t.test(inputVector,conf.level = 0.90,alternative="two sided")
t.test(inputVector,conf.level = 0.90,alternative="two.sided")
t.test(inputVector,conf.level = 0.95,alternative="two.sided")
t.test(inputVector,conf.level = 0.95,alternative="less")
t.test(inputVector,conf.level = 0.95,alternative="two.sided")
t.test(inputVector,conf.level = 0.95,alternative="greater")
t.test(inputVector,conf.level = 0.975,alternative="greater")
t.test(inputVector,conf.level = 0.975,alternative="two.sided")
t.test(inputVector,conf.level = 0.90,alternative="two.sided")
x=t.test(inputVector,conf.level = 0.90,alternative="two.sided")
x
x$conf.int
x$conf.int
x$conf.int[1]
x$conf.int[2]
x$conf.int[,1]
x$conf.int[1:2]
cat(x$conf.int[1:2])
cat(sprintf("%.1f",x$conf.int[1:2]))
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
cat(x$conf.int[1:2])
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
?sd
sd(1,2,3,4,5)
sd(c(1,2,3,4,5))
x=c(1,2,3,4,5)
mean(x)
sd(x)
m=mean(x)
sqrt(((1-m)^2+(2-m)^2)*2)
sqrt(((1-m)^2+(2-m)^2)*2/5)
for i in (1:5){}
for (i in 1:5){
total=total+(x[i]-m)^2
}
total=0
for (i in 1:5){
total=total+(x[i]-m)^2
}
total
sqrt(total/5)
sd(x)
sd(c(1,2,3,4,5))
count/(count-1)
sd(x)/(count/(count-1))
var(x)
var(x)*(count-1)
var(x)*4/5
sqrt(2)
sd(x)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
?t.test
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
error
mean(inputVector)+error
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
mean(inputVector)+error
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
sd
1.96*sd
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
x=c(1,2,3,4,4,5,5,6)
Mode(x)
y=Mode(x)
y
x=c(1,2,3,4,4,5,6)
y=Mode(x)
y
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
if(length(x)==length(ux)){min(x)}
}
Mode(x)
ux<-unique(x)
ux
x=c(1,2,3,4,4,5,5,6)
tabulate(match(x,ux))
which.max(tabulate(match(x,ux)))
tabulate(x)
match(x,ux)
table(x)
names(temp)[temp == max(temp)]
temp=table(x)
names(temp)[temp == max(temp)]
min(names(temp)[temp == max(temp)])
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
temp=table(inputVector)
names(temp)[temp == max(temp)]
min(names(temp)[temp == max(temp)])
temp[temp==max(temp)]
temp[temp==max(temp),1]
temp[1,temp==max(temp)]
temp[temp==max(temp)]
temp[temp==max(temp)][1,]
temp[temp==max(temp)][,1]
temp[temp==max(temp)]
names(temp[temp==max(temp)])
as.number(names(temp[temp==max(temp)]))
as.numeric(names(temp[temp==max(temp)]))
source('H:/R/Hackerrank/Easy/BasicStat/BasicStat.R', echo=TRUE)
